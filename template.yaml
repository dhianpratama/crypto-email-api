AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Crypto Alert API - Staging/Prod via single template

Parameters:
  Env:
    Type: String
    Description: Environment name (e.g., staging or prod)
    AllowedValues:
      - staging
      - prod
    Default: staging

Globals:
  Function:
    Timeout: 10
    Runtime: nodejs22.x
    Architectures:
      - x86_64
    MemorySize: 128
    Environment:
      Variables:
        SEARCH_HISTORY_TABLE: !Sub 'CryptoSearchHistory-${Env}'
        PRICE_CACHE_TABLE: !Sub 'CryptoPriceCache-${Env}'
        QUEUE_URL: !Ref CryptoEmailQueue
        DYNAMO_ENDPOINT: ''
        IS_LOCAL: 'false'
        SES_SENDER: 'dhianpratama.m@gmail.com'

Resources:
  CryptoSearchHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'CryptoSearchHistory-${Env}'
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  CryptoPriceCacheTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'CryptoPriceCache-${Env}'
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  CryptoEmailQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'CryptoEmailQueue-${Env}'

  GetPriceAndQueueEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'GetPriceAndQueueEmail-${Env}'
      CodeUri: services/getPriceAndQueueEmail
      Handler: dist/handler.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /crypto-price
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub 'CryptoSearchHistory-${Env}'
        - DynamoDBCrudPolicy:
            TableName: !Sub 'CryptoPriceCache-${Env}'
        - SQSSendMessagePolicy:
            QueueName: !Sub 'CryptoEmailQueue-${Env}'

  GetSearchHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'GetSearchHistory-${Env}'
      CodeUri: services/getSearchHistory
      Handler: dist/handler.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /search-history
            Method: get
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub 'CryptoSearchHistory-${Env}'

  SendEmailFromQueueFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'SendEmailFromQueue-${Env}'
      CodeUri: services/sendEmailFromQueue
      Handler: dist/handler.handler
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt CryptoEmailQueue.Arn
      Policies:
        - SESCrudPolicy:
            IdentityName: '*'

  FetchCryptoPricesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'FetchCryptoPrices-${Env}'
      CodeUri: services/fetchCryptoPrices
      Handler: dist/handler.handler
      Events:
        PriceTimer:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub 'CryptoPriceCache-${Env}'

Outputs:
  ApiUrl:
    Description: 'API Gateway endpoint'
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
